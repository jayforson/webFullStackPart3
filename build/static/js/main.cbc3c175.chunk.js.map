{"version":3,"sources":["services/phonebookService.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Notification","notification","className","type","message","Filter","value","onChange","PersonForm","name","number","onNameChange","onNumberChange","onSubmit","Persons","persons","onClick","map","person","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","nameFilter","setNameFilter","setNotification","useEffect","phonebookService","initialPersons","personsToShow","filter","toUpperCase","includes","displayNotification","text","setTimeout","event","target","preventDefault","personToChange","find","window","confirm","personToUpdate","returnPerson","p","catch","error","createdPerson","concat","alert","removedPerson","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cbc3c175.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = './api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n  \r\nexport default { getAll, create, update, remove }","import phonebookService from './services/phonebookService'\nimport React, { useState, useEffect } from 'react'\n\nconst Notification = ({notification}) => {\n  if (notification == null) {\n    return null\n  }\n  \n  return(\n    <div className={notification.type}>\n      {notification.message}\n    </div>\n  )\n}\nconst Filter = ({value, onChange}) => {\n  return(\n    <div>\n      filter shown with <input value={value} onChange={onChange}/>\n    </div>\n  )\n}\n\nconst PersonForm = ({name, number, onNameChange, onNumberChange, onSubmit}) => {\n  return(\n    <form onSubmit={onSubmit}>\n      <div>\n        name: <input value={name} onChange={onNameChange}/>\n      </div>\n      <div>\n        number: <input value={number} onChange={onNumberChange}/>\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Persons = ({persons, onClick}) => {\n  return(  \n    <div>\n      {persons.map( person => \n      <div key={person.id}>\n        {person.name} {person.number} \n        <button onClick={onClick(person)}>delete</button>\n      </div>)}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ nameFilter, setNameFilter ] = useState('')\n  const [ notification, setNotification] = useState(null)\n\n  useEffect(() => {\n    phonebookService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, []) \n\n  const personsToShow = nameFilter === '' \n    ? persons\n    : persons.filter(person => \n    person.name.toUpperCase().includes(nameFilter.toUpperCase()))\n\n  const displayNotification = (text, type) => {\n    setNotification({message: text, type: type})\n    setTimeout(() => {\n      setNotification(null)\n    }, 10000)\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n\n     // check if the user entered a number\n    if (newNumber === '') {\n      window.alert('Please input the number')\n      return\n    }\n\n    // check if the name is already exsit\n    const personToChange = persons.find(person => person.name.toUpperCase() === newName.toUpperCase())\n    \n    if (personToChange) {\n      // if already in the server, prompt user to upadte number\n      if (window.confirm(newName + ' is already added to phonebook, replace the old number with a new one?')) {\n        const personToUpdate = {...personToChange, number: newNumber}\n        phonebookService\n          .update(personToChange.id, personToUpdate)\n          .then(returnPerson => {\n            setPersons(persons.map(p => p.id !== personToChange.id ? p : returnPerson ))\n            displayNotification('Updated ' + returnPerson.name, 'notification')\n          })\n          .catch(error => {\n            setPersons(persons.filter(p => p.id !== personToChange.id))\n            displayNotification('information of ' + personToChange.name + ' has already been removed from server','error')\n          })\n      }\n    } else{\n      // if no the same name in the phoneBook, add name to service\n      const newPerson = {name: newName, number: newNumber}\n      phonebookService\n        .create(newPerson)\n        .then(createdPerson => {\n          setPersons(persons.concat(createdPerson))\n          displayNotification('Added ' + createdPerson.name, 'notification')\n        })\n      setNewName('')\n      setNewNumber('')\n    }\n  }\n\n  const onDeleteClicked = (person) => () => {\n    if(window.confirm('Delete ' + person.name + '?')) {\n      phonebookService\n        .remove(person.id)\n        .then(removedPerson => {\n          setPersons(persons.filter(p => p.name !== person.name))\n          displayNotification('removed ' + person.name, 'notification')\n        })\n        .catch(error => {\n          setPersons(persons.filter(p => p.name !== person.name))\n          displayNotification('information of ' + person.name + ' has already been removed from server','error')\n        })\n    } \n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleNameFilter = (event) => {\n    setNameFilter(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification notification={notification}/>\n      <Filter value={nameFilter} onChange={handleNameFilter}/>\n      <h3>add a new</h3>\n      <PersonForm name={newName}\n                  number={newNumber}\n                  onNameChange={handleNameChange}\n                  onNumberChange={handleNumberChange}\n                  onSubmit={addPerson}/>\n      <h2>Numbers</h2>\n      <Persons persons={personsToShow} onClick={onDeleteClicked}/>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}